#!/usr/bin/perl -w
#
# Dh_GSvgGen.pm - assorted functions for creating a family tree in SVG format.
#
# Calling sequence:
#	DhG_SvgGen_OpenFile()		-- opens the svg file
#	DhG_SvgGen_StartFile()		-- writes the svg file header to the current output file
#	DhG_SvgGen_StartFamily()	-- writes the svg tags for family to the current output file
#	DhG_SvgGen_Parents()		-- writes the parents partnership, initialises children vars.
#	DhG_SvgGen_Child()			-- for each child, outputs the child's box
#	DhG_SvgGen_FinishFamily()	-- writes the svg tags for end-family to the current output file
#	DhG_SvgGen_FinishFile()		-- writes the svg file tailer to the current output file
#	DhG_SvgGen_CloseFile()		-- closes the current file
#
# (c) 2011 David Haworth
#
# This file is part of DhG.
#
# DhG is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DhG is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with DhG.  If not, see <http://www.gnu.org/licenses/>.
#
# $Id$

package Dh_GSvgGen;

use Exporter();
@ISA = qw(Exporter);
@EXPORT  =
(
	DhG_SvgGen_OpenFile,
	DhG_SvgGen_CloseFile,
	DhG_SvgGen_StartFile,
	DhG_SvgGen_StartFamily,
	DhG_SvgGen_Parents,
	DhG_SvgGen_Child,
	DhG_SvgGen_FinishFamily,
	DhG_SvgGen_FinishFile,
	DhG_SvgGen_Test
);

# Configuration constants
my $box_height = 50;
my $box_width = 100;
my $forename_pos = 15;
my $surname_pos = 28;
my $dobdod_pos = 42;
my $corner_radius = 10;

my $horizontal_gap = 20;
my $vertical_gap = 120;

my $marr_width = $box_width;
my $marr_height = 10;

# Derived constants
my $box_text = $box_width/2;

my $parent_top = $vertical_gap/2;

my $child_top = $parent_top + $box_height + $vertical_gap;

# State variables
my $child_left = $horizontal_gap/2;		# Left side of 1st child box
my $child_num = 0;						# No. of children already output

my $family_left = 10;
my $family_top = 10;
my $family_width = 0;

sub DhG_SvgGen_Test;
sub DhG_SvgGen_OpenFile;
sub DhG_SvgGen_CloseFile;
sub DhG_SvgGen_StartFile;
sub DhG_SvgGen_FinishFile;
sub DhG_SvgGen_StartFamily;
sub DhG_SvgGen_FinishFamily;
sub DhG_SvgGen_Parents;
sub DhG_SvgGen_Child;

return 1;

sub DhG_SvgGen_Test
{
	my ($n_children) = @_;

	if ( DhG_SvgGen_OpenFile("test.svg") == 0 )
	{
		DhG_SvgGen_Head();

		DhG_SvgGen_Parents("Gumby", "Dad", "1901", "2001", "Gummybum", "Mum", "1903", "1997",
																					$n_children);

		DhG_SvgGen_Child("Gumby", "Alice", "1920", "1960") if ( $n_children > 0 );
		DhG_SvgGen_Child("Gumby", "Bob", "1922", "1965") if ( $n_children > 1 );
		DhG_SvgGen_Child("Gumby", "Charlie", "1924", "1970") if ( $n_children > 2 );
		DhG_SvgGen_Child("Gumby", "Dennis", "1926", "1975") if ( $n_children > 3 );

		DhG_SvgGen_Child("Gumby", "Ethel", "1928", "1960") if ( $n_children > 4 );
		DhG_SvgGen_Child("Gumby", "Fred", "1930", "1965") if ( $n_children > 5 );
		DhG_SvgGen_Child("Gumby", "Gertie", "1932", "1970") if ( $n_children > 6 );
		DhG_SvgGen_Child("Gumby", "Harriet", "1934", "1975") if ( $n_children > 7 );

		DhG_SvgGen_Child("Gumby", "Ian", "1936", "1960") if ( $n_children > 8 );
		DhG_SvgGen_Child("Gumby", "Julia", "1938", "1965") if ( $n_children > 9 );
		DhG_SvgGen_Child("Gumby", "Kate", "1940", "1970") if ( $n_children > 10 );
		DhG_SvgGen_Child("Gumby", "Len", "1942", "1975") if ( $n_children > 11 );

		DhG_SvgGen_CloseFile();
	}
}
#	DhG_SvgGen_OpenFile() - opens named file as current svg file, returns 0 if OK.
#
#	Parameters:
#		1:	name of file to open
sub DhG_SvgGen_OpenFile
{
	my ($svgfilename) = @_;
	my $error = 0;

	if ( !open(SVGFILE, ">$svgfilename") )
	{
		print STDERR "Cannot open $svgfilename for writing\n";
		$error = 1;
	}
	return $error;
}

#	DhG_SvgGen_CloseFile() - closes current svg file
sub DhG_SvgGen_CloseFile
{
	close SVGFILE;
}

#	DhG_SvgGen_StartFile() - outputs svg file header to current svg file
sub DhG_SvgGen_StartFile
{
	print SVGFILE "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n";
	print SVGFILE "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n";
	print SVGFILE " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n";
	print SVGFILE "<!-- Generated by Dh_GCard version 0.0.0  -->\n";
	print SVGFILE "<svg xmlns=\"http://www.w3.org/2000/svg\"\n";
	print SVGFILE "     xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n";
}

#	DhG_SvgGen_FinishFile() - outputs svg file tailer to current svg file
sub DhG_SvgGen_FinishFile
{
	print SVGFILE "</svg>\n";
}

#	DhG_SvgGen_StartFamily() - outputs svg family header to current svg file
sub DhG_SvgGen_StartFamily
{
	my ($family) = @_;
	my $familyid = $family;
	$familyid =~ s/\s//g;

	print SVGFILE "\n";
	print SVGFILE "  <!-- Family of $family -->\n";
	print SVGFILE "  <g id=\"$familyid\" transform=\"translate($family_left $family_top)\">\n";
}

#	DhG_SvgGen_FinishFamily() - outputs svg family tailer to current svg file
sub DhG_SvgGen_FinishFamily
{
	print SVGFILE "\n";
	print SVGFILE "  </g>\n";

	$family_left += $family_width;
}

#	DhG_SvgGen_Parents() - outputs parents' partnership to current svg file
#		* boxes for mother and father, and joining line
#		* descender and family bar if there are children
#		* initialises variables for children
#
#	Parameters:
#		1: father's surname
#		2: father's forename
#		3: father's date-of-birth
#		4: father's date-of-death
#		5: mother's surname
#		6: mother's forename
#		7: mother's date-of-birth
#		8: mother's date-of-death
#		9: no. of children
sub DhG_SvgGen_Parents
{
	my ($f_surname, $f_forename, $f_dob, $f_dod,
		$m_surname, $m_forename, $m_dob, $m_dod, $n_children) = @_;

	my $bar_length = 0;

	my $total_width = $horizontal_gap + 2 * $box_width + $marr_width;

	if ( $n_children > 0 )
	{
		my $total_children_width = ($box_width + $horizontal_gap) * $n_children;

		if ( $total_width < $total_children_width )
		{
			$total_width = $total_children_width;
		}

		$bar_length = $total_children_width - ($box_width + $horizontal_gap);
	}

	$family_width = $total_width;
	my $centre = $total_width/2;


	#Start of group containing parents.
	print SVGFILE "    <g>\n";

	#Father
	my $x = $centre - $box_width - $marr_width/2;
	DhG_SvgGen_PersonBox($x, $parent_top, $f_surname, $f_forename, $f_dob, $f_dod);

	#Mother
	$x = $centre + $marr_width/2;
	DhG_SvgGen_PersonBox($x, $parent_top, $m_surname, $m_forename, $m_dob, $m_dod);

	$x = $centre - $marr_width/2;
	my $y = $parent_top + $box_height/2;

	# A box connecting the two parents
	print SVGFILE "      <rect fill=\"transparent\" stroke=\"black\"\n";
	print SVGFILE "            x=\"$x\" y=\"$y\"\n";
	print SVGFILE "            width=\"$marr_width\" height=\"$marr_height\"/>\n";

	#End of group containing parents
	print SVGFILE "    </g>\n";

	if ( $n_children > 0 )
	{
		#Start of group containing tree connections.
		print SVGFILE "\n";
		print SVGFILE "    <g>\n";

		my $y1 = $parent_top + $box_height/2 + $marr_height;
		my $y2 = $parent_top + $box_height + $vertical_gap/2;

		#Line connecting parents marriage to bar
		print SVGFILE "      <line stroke=\"black\"\n";
		print SVGFILE "            x1=\"$centre\" y1=\"$y1\"\n";
		print SVGFILE "            x2=\"$centre\" y2=\"$y2\"/>\n";
		
		my $x1 = $centre - $bar_length/2;
		my $x2 = $x1 + $bar_length;

		$child_left = $x1 - $box_width/2;

		if ( $n_children > 1 )
		{
			#Bar
			print SVGFILE "      <line stroke=\"black\"\n";
			print SVGFILE "            x1=\"$x1\" y1=\"$y2\"\n";
			print SVGFILE "            x2=\"$x2\" y2=\"$y2\"/>\n";
		}

		#End of group containing tree connections
		print SVGFILE "    </g>\n";
	}

	# Initialise state variables for children
	$child_num = 0;
}

#	DhG_SvgGen_Child() -  outputs a child to current svg file
#
#	Parameters:
#		1: child's surname
#		2: child's forename
#		3: child's date-of-birth
#		4: child's daate-of-death
sub DhG_SvgGen_Child
{
	my ($c_surname, $c_forename, $c_dob, $c_dod) = @_;

	DhG_SvgGen_PersonBox($child_left, $child_top, $c_surname, $c_forename, $c_dob, $c_dod);

	$child_num++;
	$child_left += ($box_width + $horizontal_gap);
}

#	DhG_SvgGen_PersonBox()	- output a person box to the current svg file
#
#	Parameters:
#		1:	left side of box
#		2:	top of box
#		3:	surname
#		4:	forename
#		5:	date-of-birth
#		6:	date-of-death
#		7:	row number:
#			0: parents' row
#			1: first row of children
#			2: second row of children
sub DhG_SvgGen_PersonBox
{
	my ($box_left, $box_top, $p_surname, $p_forename, $p_dob, $p_dod) = @_;

	print SVGFILE "    <g transform=\"translate($box_left $box_top)\">\n";
	print SVGFILE "\n";
	print SVGFILE "      <rect fill=\"transparent\" stroke=\"black\"\n";
	print SVGFILE "            x=\"0\" y=\"0\" width=\"$box_width\" height=\"$box_height\"\n";
	print SVGFILE "            rx=\"10\" ry=\"10\"/>\n";
	print SVGFILE "\n";
	print SVGFILE "      <text text-anchor=\"middle\" x=\"$box_text\" y=\"$forename_pos\"\n";
	print SVGFILE "            font-family=\"Times New Roman,serif\"\n";
	print SVGFILE "            font-style=\"normal\"\n";
	print SVGFILE "            font-weight=\"normal\"\n";
	print SVGFILE "            font-size=\"10\">$p_forename</text>\n";
	print SVGFILE "\n";
	print SVGFILE "      <text text-anchor=\"middle\" x=\"$box_text\" y=\"$surname_pos\"\n";
	print SVGFILE "            font-family=\"Times New Roman,serif\"\n";
	print SVGFILE "            font-style=\"normal\"\n";
	print SVGFILE "            font-weight=\"bold\"\n";
	print SVGFILE "            font-size=\"10\">$p_surname</text>\n";
	print SVGFILE "\n";
	print SVGFILE "      <text text-anchor=\"middle\" x=\"$box_text\" y=\"$dobdod_pos\"\n";
	print SVGFILE "            font-family=\"Times New Roman,serif\"\n";
	print SVGFILE "            font-style=\"italic\"\n";
	print SVGFILE "            font-weight=\"normal\"\n";
	print SVGFILE "            font-size=\"10\">$p_dob - $p_dod</text>\n";
	print SVGFILE "\n";
	print SVGFILE "    </g>\n";
}
